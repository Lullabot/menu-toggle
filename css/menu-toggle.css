*,
*:before,
*:after {
  box-sizing: border-box; }

/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: none; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 0.0625rem dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -0.125rem;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

img {
  max-width: 100%;
  height: auto; }
  figure > img {
    display: block; }

video {
  max-width: 100%; }

iframe {
  max-width: 100%; }

html {
  scroll-behavior: smooth;
  overflow-y: scroll; }
  html:focus:not(:focus-visible) {
    outline: 0; }

body {
  font-family: ff-tisa-web-pro, Georgia, serif;
  font-size: 1rem;
  line-height: 1.6;
  background: palette(grayscale-100);
  color: palette(grayscale-20);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.body-inner {
  width: 100%;
  overflow: hidden;
  padding: 0 2rem;
  min-height: 100vh; }
  @media (min-width: 820px) {
    .body-inner {
      padding: 0 3rem; } }
  @media (min-width: 1050px) {
    .body-inner {
      padding: 0 4rem; } }

table {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 4rem;
  margin-bottom: 4rem;
  max-width: 80rem; }

td,
th,
caption {
  padding: 1rem;
  border: 0; }
  @media (min-width: 820px) {
    td,
    th,
    caption {
      padding-left: 2rem;
      padding-right: 2rem; } }

tr:nth-of-type(odd) {
  border: 0;
  background: #f5f5f5; }

tr:nth-of-type(even) {
  border: 0;
  background: rgba(245, 245, 245, 0.5); }

td:only-child,
th:only-child {
  text-align: center; }

th {
  text-align: left; }
  thead th,
  tfoot th {
    padding: 1rem;
    background: #ebebeb; }
    @media (min-width: 820px) {
      thead th,
      tfoot th {
        padding-left: 2rem;
        padding-right: 2rem; } }

td {
  border-bottom: 0.0625rem solid #ebebeb; }
  th td {
    font-weight: bold; }

caption {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  padding: 1rem;
  text-align: center;
  background: #f5f5f5; }

h1 {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 2rem;
  margin-bottom: 1rem;
  font-weight: bold; }
  + h1,
  h1 + .u-heading-l {
    margin-top: 0; }

h2 {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 4rem;
  margin-bottom: 1rem;
  font-weight: bold; }
  + h2,
  h2 + .u-heading-xm {
    margin-top: 0; }

h3 {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 3rem;
  margin-bottom: 1rem;
  font-weight: bold; }
  + h3,
  h3 + .u-heading-m {
    margin-top: 0; }

h4 {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 3rem;
  margin-bottom: 1rem;
  font-weight: bold;
  letter-spacing: 0.01125rem;
  text-transform: uppercase; }
  + h4,
  h4 + .u-heading-s {
    margin-top: 0; }

h5 {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 3rem;
  margin-bottom: 1rem;
  font-weight: bold;
  letter-spacing: 0.01125rem;
  text-transform: uppercase; }
  + h5,
  h5 + .u-heading-xs {
    margin-top: 0; }

h6 {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  margin-top: 3rem;
  margin-bottom: 1rem;
  font-weight: bold;
  letter-spacing: 0.0625rem;
  text-transform: uppercase; }
  @media (min-width: 820px) {
    h6 {
      margin-top: 4rem; } }

h1:not([class]):first-child,
h2:not([class]):first-child,
h3:not([class]):first-child,
h4:not([class]):first-child,
h5:not([class]):first-child,
h6:not([class]):first-child {
  margin-top: 0; }

a {
  text-decoration: none;
  color: palette(blue-15); }
  a:hover, a:focus {
    color: palette(blue-30); }
  a:before {
    background-color: palette(blue-30); }

p {
  margin-top: 0;
  margin-bottom: 2rem; }
  p:last-child {
    margin-bottom: 0; }

ul,
ol {
  margin: 2rem 0;
  padding: 0 0 0 2rem; }
  ul ul,
  ul ol,
  ol ul,
  ol ol {
    margin: 1rem 0; }

li {
  margin-bottom: 1rem; }
  li:last-child {
    margin-bottom: 0; }

pre {
  position: relative;
  margin-top: 1rem;
  margin-bottom: 1rem;
  padding: 2rem 2.25rem;
  min-width: 100%;
  max-width: 100vw;
  border: 0.0625rem solid #d3d3d3;
  box-shadow: inset 0.375rem 0 0 0 #d3d3d3;
  background: #f5f5f5;
  overflow: scroll;
  font-family: Consolas, 'Courier New', Courier, monospace; }
  @media (min-width: 820px) {
    pre {
      margin-left: 0;
      margin-right: 0; } }

blockquote {
  margin: 5rem 0; }
  @media (min-width: 820px) {
    blockquote {
      margin: 6rem 0; } }

cite {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  font-style: normal; }

mark {
  display: inline-block;
  margin: 0 -0.125em;
  padding: 0 0.125em;
  background-color: #f1e890; }

dt {
  font-weight: bold; }

abbr[title] {
  text-decoration: none;
  border-bottom: 0.0625rem dotted currentColor;
  transition: border 0.5s; }
  abbr[title]:hover {
    border-bottom-color: palette(blue-15); }

.menu-toggle {
  position: absolute;
  width: 0.0625rem;
  height: 0.0625rem;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  -webkit-clip-path: inset(50%);
          clip-path: inset(50%);
  border: 0; }
  .menu-toggle.focusable:active, .menu-toggle.focusable:focus {
    position: relative;
    z-index: 5;
    clip: auto;
    -webkit-clip-path: none;
            clip-path: none;
    overflow: visible;
    height: auto;
    width: auto; }

.menu-toggle__button {
  display: block;
  cursor: pointer;
  border: 0;
  overflow: hidden;
  background: transparent;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }

.menu-toggle--example-1 ~ .menu-toggle__toggleable--example-1-wrapper, .menu-toggle__toggleable--example-1-wrapper.js-menu-toggle__toggleable {
  visibility: hidden;
  transition: visibility 0s 0.4s, height 0.25s ease-in-out;
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  height: 0;
  overflow: hidden;
  background: #fff; }

.menu-toggle--example-1:checked ~ .menu-toggle__toggleable--example-1-wrapper, .menu-toggle__toggleable--example-1-wrapper.js-menu-toggle__toggleable--open {
  visibility: visible;
  transition: visibility 0s 0s, height 0.25s ease-in-out;
  height: 100vh;
  overflow-y: scroll; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
